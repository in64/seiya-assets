name: 构建发布 pages

on:
  repository_dispatch:
    types: [build-from-seiya]

  workflow_dispatch:
  
permissions:
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Download source code from Repo
        run: |
          set -x
          curl -L \
            -o source.zip \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/in64/seiya-docker/zipball/main
          mkdir -p ./source/debian-chroot
          unzip -qq source.zip
          mv in64-*/{README.md,services} source/
          cp in64-*/debian-chroot/android_start_debian.sh source/
          DEBIAN_IMG_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" https://api.github.com/repos/in64/seiya-docker/releases | jq -r 'map(select(.prerelease==true)) | first | .assets[0].id')
          curl -L -H "Authorization: token ${{ secrets.PAT_TOKEN }}" -H "Accept: application/octet-stream" \
              https://api.github.com/repos/in64/seiya-docker/releases/assets/$DEBIAN_IMG_ID -o debian-arm64.tgz
          mv debian-arm64.tgz source/debian-rootfs-arm64.tgz
          curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" https://api.github.com/repos/in64/speedup/releases/latest | jq -r '.assets[] | select(.name | test("musl\\.zip$")) | "\(.id) \(.name)"' |
          while read -r ID NAME; do
            ARCH=$(grep -oE 'x86_64|aarch64' <<< "$NAME")
            curl -L -H "Authorization: token ${{ secrets.PAT_TOKEN }}" -H "Accept: application/octet-stream" \
              https://api.github.com/repos/in64/speedup/releases/assets/$ID -o tmp.zip
            unzip -o tmp.zip && mv speedup-rs source/services/speedup/speedup-rs_$ARCH && rm -f tmp.zip
          done
          curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" https://api.github.com/repos/in64/docker-proxy/releases/latest | jq -r '.assets[] | select(.name | test("musl\\.zip$")) | "\(.id) \(.name)"' |
          while read -r ID NAME; do
            ARCH=$(grep -oE 'x86_64|aarch64' <<< "$NAME")
            curl -L -H "Authorization: token ${{ secrets.PAT_TOKEN }}" -H "Accept: application/octet-stream" \
              https://api.github.com/repos/in64/docker-proxy/releases/assets/$ID -o tmp.zip
            unzip -o tmp.zip && mv docker-proxy-rs source/services/docker-proxy/docker-proxy-rs_$ARCH && rm -f tmp.zip
          done
          curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" https://api.github.com/repos/in64/vless-tunnel/releases/latest | jq -r '.assets[] | select(.name | test("musl\\.zip$")) | "\(.id) \(.name)"' |
          while read -r ID NAME; do
            ARCH=$(grep -oE 'x86_64|aarch64' <<< "$NAME")
            curl -L -H "Authorization: token ${{ secrets.PAT_TOKEN }}" -H "Accept: application/octet-stream" \
              https://api.github.com/repos/in64/vless-tunnel/releases/assets/$ID -o tmp.zip
            unzip -o tmp.zip && mv vless-tunnel source/services/vless-tunnel/vless-tunnel_$ARCH && rm -f tmp.zip
          done

      - name: Setup Ruby
        uses: ruby/setup-ruby@4a9ddd6f338a97768b8006bf671dfbad383215f4
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./source
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
